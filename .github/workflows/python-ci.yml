# This workflow will install Python dependencies, run tests and lint with a variety of Python versions.
#
# On successful test, the package will be published. For candidate releases, the package will be
#  published to test.pypi.org server (to ensure the process works). For merges to master, the
#  package will be published live.

name: python-ci

on: [push]

jobs:

  check-semantic-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          # Set fetch-depth to 0 to fetch all tags (necessary for git-mkver to determine the correct semantic version).
          fetch-depth: 0
      - uses: actions/setup-python@v2
      - name: Install git-mkver
        run: |
          curl -L https://github.com/idc101/git-mkver/releases/download/v1.2.1/git-mkver-linux-amd64-1.2.1.tar.gz \
          | tar xvz \
          && sudo mv git-mkver /usr/local/bin
      - name: Check version
        run: python .github/workflows/scripts/check-semantic-version.py

  run-tests:
    if: "!contains(github.event.head_commit.message, 'skip_ci_tests')"
    runs-on: ${{ matrix.os }}
    env:
      USING_COVERAGE: '3.8'
    strategy:
      matrix:
        python: [3.8]
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: Install tox
        run: pip install tox
      - name: Run tests
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          TEST_PROJECT_NAME: ${{ secrets.TEST_PROJECT_NAME }}
        run: tox -e py
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          file: coverage.xml
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  create-pull-request-notes:
    if: "!contains(github.ref, 'main')"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          # Set fetch-depth to 0 to fetch all commit history (necessary for compiling pull request description).
          fetch-depth: 0

      - name: Get commit's pull request
        uses: 8BitJonny/gh-get-current-pr@1.1.0
        id: get_pull_request
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          filterOutClosed: false

      - name: Get current pull request description
        run: |
          echo 'CURRENT_PULL_REQUEST_NOTES<<EOF' >> $GITHUB_ENV
          echo "'${{ steps.get_pull_request.outputs.pr }}'" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Compile new pull request description
        run: |
          echo 'PULL_REQUEST_NOTES<<EOF' >> $GITHUB_ENV
          echo "$(python .github/workflows/scripts/compile-release-notes.py LAST_PULL_REQUEST "${{ env.CURRENT_PULL_REQUEST_NOTES }}")" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
#        env:
#          pr_json: "${{ steps.get_pull_request.outputs.pr }}"

      - name: Update pull request body
        uses: kt3k/update-pr-description@v1.0.1
        with:
          destination_branch: "main"
          pr_body: ${{ env.PULL_REQUEST_NOTES }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

  publish:
    if: "!contains(github.event.head_commit.message, 'skip_ci_publish')"
    runs-on: ubuntu-latest
    needs: [check-semantic-version, run-tests]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Make package
        run: |
          python3 -m pip install --upgrade setuptools wheel
          python3 setup.py sdist bdist_wheel
      - name: Test package is publishable with PyPI test server
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
          skip_existing: true
      - name: Publish latest package to PyPI
        if: contains(github.ref, 'main')
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          verbose: true
